
üìÇ Directory: C:\Users\Tech\Calendrier-1\calendrier\frontend
================================================================================

üìù File: eslint.config.js
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\eslint.config.js
--------------------------------------------------------------------------------
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

üìù File: index.html
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\index.html
--------------------------------------------------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

üìù File: package.json
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\package.json
--------------------------------------------------------------------------------
{
  "name": "calendrier",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "start:server": "node src/server/index.js"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.58.0",
    "@tailwindcss/vite": "^4.1.13",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "express": "^5.1.0",
    "react": "^19.1.1",
    "react-big-calendar": "^1.19.4",
    "react-dom": "^19.1.1",
    "tailwindcss": "^4.1.13"
  },
  "devDependencies": {
    "@eslint/js": "^9.35.0",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.2",
    "eslint": "^9.35.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "vite": "^7.1.6"
  }
}

üìù File: README.md
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\README.md
--------------------------------------------------------------------------------
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

üìù File: vite.config.js
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\vite.config.js
--------------------------------------------------------------------------------
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})

================================================================================

üìÇ Directory: C:\Users\Tech\Calendrier-1\calendrier\frontend\public
================================================================================

================================================================================

üìÇ Directory: C:\Users\Tech\Calendrier-1\calendrier\frontend\src
================================================================================

üìù File: App.css
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\App.css
--------------------------------------------------------------------------------
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

üìù File: App.jsx
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\App.jsx
--------------------------------------------------------------------------------
import React from "react";
import MyBigCalendar from "./Calendar.jsx";

function App() {
  return (
    <div className="App">
      <MyBigCalendar />
    </div>
  );
}

export default App;

üìù File: Calendar.jsx
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\Calendar.jsx
--------------------------------------------------------------------------------
// src/Calendar.jsx
import { createEvent } from "./services/api";
import React, { useState, useMemo } from "react";
import { Calendar, dateFnsLocalizer } from "react-big-calendar";
import format from "date-fns/format";
import parse from "date-fns/parse";
import startOfWeek from "date-fns/startOfWeek";
import getDay from "date-fns/getDay";
import enUS from "date-fns/locale/en-US";
import "react-big-calendar/lib/css/react-big-calendar.css";

const locales = { "en-US": enUS };
const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});

export default function MyBigCalendar() {
  const getCurrentDateTime = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  };

  const getOneHourFromNow = () => {
    const now = new Date();
    now.setHours(now.getHours() + 1);
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const day = String(now.getDate()).padStart(2, "0");
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  };

  const formatDateTimeLocal = (date) => {
    const d = new Date(date);
    const year = d.getFullYear();
    const month = String(d.getMonth() + 1).padStart(2, "0");
    const day = String(d.getDate()).padStart(2, "0");
    const hours = String(d.getHours()).padStart(2, "0");
    const minutes = String(d.getMinutes()).padStart(2, "0");
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  };

  const [events, setEvents] = useState([]);
  const [newEvent, setNewEvent] = useState({
    title: "",
    start: getCurrentDateTime(),
    end: getOneHourFromNow(),
    allDay: false,
  });
  const [editingEvent, setEditingEvent] = useState(null);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentView, setCurrentView] = useState("week");

  // Save-all states
  const [isSavingAll, setIsSavingAll] = useState(false);
  const [saveAllMessage, setSaveAllMessage] = useState(null);

  // Basic id generator for demo purposes
  const nextId = useMemo(() => {
    return () => Math.max(0, ...events.map((e) => e.id || 0)) + 1;
  }, [events]);

  function validateEvent(event) {
    const newErrors = {};

    if (!event.title || !event.title.trim()) {
      newErrors.title = "Event title is required";
    }

    if (!event.start) {
      newErrors.start = "Start time is required";
    }

    if (!event.end) {
      newErrors.end = "End time is required";
    }

    if (event.start && event.end) {
      const startDate = new Date(event.start);
      const endDate = new Date(event.end);

      if (isNaN(startDate.getTime())) {
        newErrors.start = "Invalid start date";
      }

      if (isNaN(endDate.getTime())) {
        newErrors.end = "Invalid end date";
      }

      if (startDate >= endDate) {
        newErrors.end = "End time must be after start time";
      }
    }

    return newErrors;
  }

  async function handleAddEvent(e) {
    e.preventDefault();

    if (isSubmitting) return; // Prevent double submission

    setIsSubmitting(true);
    setErrors({});

    try {
      const validationErrors = validateEvent(newEvent);

      if (Object.keys(validationErrors).length > 0) {
        setErrors(validationErrors);
        return;
      }

      const startDate = new Date(newEvent.start);
      const endDate = new Date(newEvent.end);

      const newEventObj = {
        id: nextId(),
        title: newEvent.title.trim(),
        start: startDate,
        end: endDate,
        allDay: newEvent.allDay,
      };

      setEvents((prev) => [...prev, newEventObj]);
      setNewEvent({
        title: "",
        start: getCurrentDateTime(),
        end: getOneHourFromNow(),
        allDay: false,
      });
    } catch (error) {
      console.error("Error adding event:", error);
      setErrors({ general: "Failed to add event. Please try again." });
    } finally {
      setIsSubmitting(false);
    }
  }

  async function handleUpdateEvent(e) {
    e.preventDefault();

    if (isSubmitting || !editingEvent) return;

    setIsSubmitting(true);
    setErrors({});

    try {
      const validationErrors = validateEvent(editingEvent);

      if (Object.keys(validationErrors).length > 0) {
        setErrors(validationErrors);
        return;
      }

      const startDate = new Date(editingEvent.start);
      const endDate = new Date(editingEvent.end);

      const updatedEvent = {
        ...editingEvent,
        title: editingEvent.title.trim(),
        start: startDate,
        end: endDate,
      };

      setEvents((prev) =>
        prev.map((event) =>
          event.id === editingEvent.id ? updatedEvent : event
        )
      );

      setEditingEvent(null);
    } catch (error) {
      console.error("Error updating event:", error);
      setErrors({ general: "Failed to update event. Please try again." });
    } finally {
      setIsSubmitting(false);
    }
  }

  function handleSelectEvent(event) {
    // Set the event for editing
    setEditingEvent({
      ...event,
      start: formatDateTimeLocal(event.start),
      end: formatDateTimeLocal(event.end),
    });
  }

  async function handleDeleteEvent(eventId) {
    if (!window.confirm("Are you sure you want to delete this event?")) return;

    // Remove locally first
    setEvents((prev) => prev.filter((event) => event.id !== eventId));
    if (editingEvent && editingEvent.id === eventId) {
      setEditingEvent(null);
    }
    // NOTE: we do not call the server delete here because the "save all" approach
    // inserts everything to the server in bulk. If you want immediate deletes,
    // add a call to your API's delete function.
  }

  function handleCancelEdit() {
    setEditingEvent(null);
    setErrors({});
  }

  function handleSelectSlot(slotInfo) {
    try {
      const title = prompt("New event title for selected range:");
      if (!title || !title.trim()) return;

      const isAllDay = slotInfo.slots && slotInfo.slots.length === 1;

      const newEventObj = {
        id: nextId(),
        title: title.trim(),
        start: slotInfo.start,
        end: slotInfo.end,
        allDay: isAllDay,
      };

      setEvents((prev) => [...prev, newEventObj]);
    } catch (error) {
      console.error("Error creating event from slot:", error);
    }
  }

  // Save all events to server (calls createEvent for each event)
  async function handleSaveAllToServer() {
    if (isSavingAll) return;
    if (!events || events.length === 0) {
      setSaveAllMessage("No events to save.");
      return;
    }

    if (!window.confirm(`Save ${events.length} event(s) to the server?`))
      return;

    setIsSavingAll(true);
    setSaveAllMessage(null);

    try {
      await Promise.all(
        events.map((ev) =>
          createEvent({
            title: ev.title,
            start:
              ev.start instanceof Date
                ? ev.start.toISOString()
                : String(ev.start),
            end: ev.end instanceof Date ? ev.end.toISOString() : String(ev.end),
            allDay: !!ev.allDay,
            userId: ev.userId ?? null,
            category: ev.category ?? null,
            color: ev.color ?? null,
          })
        )
      );

      setSaveAllMessage("All events were successfully saved to the server.");
    } catch (err) {
      console.error("Failed to save events:", err);
      console.error("supabase error details:", {
        message: err?.message,
        code: err?.code,
        hint: err?.hint,
        details: err?.details,
        status: err?.status,
      });
      setSaveAllMessage("Failed to save events. See console for details.");
    } finally {
      setIsSavingAll(false);
    }
  }

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-4">
          <h1 className="text-4xl font-bold text-white mb-2">Calendar</h1>
          <p className="text-gray-400">Manage your events and schedule</p>
        </div>

        {/* Controls: Save all button + status */}
        <div className="mb-6 flex items-center justify-between gap-4">
          <div className="flex gap-2">
            <button
              onClick={handleSaveAllToServer}
              className="simple-button"
              disabled={isSavingAll}
            >
              {isSavingAll ? "Saving..." : "Save all to server"}
            </button>
          </div>

          {saveAllMessage && (
            <div className="text-sm text-gray-300">{saveAllMessage}</div>
          )}
        </div>

        {/* Add event form */}
        <div className="simple-card mb-8">
          <h2 className="text-xl font-semibold text-white mb-4">
            Create New Event
          </h2>

          {errors.general && (
            <div className="mb-4 p-3 bg-red-900/20 border border-red-500 rounded text-red-300 text-sm">
              {errors.general}
            </div>
          )}

          <form
            onSubmit={handleAddEvent}
            className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end"
          >
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Title *
              </label>
              <input
                className={`simple-input ${
                  errors.title ? "border-red-500" : ""
                }`}
                value={newEvent.title}
                onChange={(e) => {
                  setNewEvent({ ...newEvent, title: e.target.value });
                  if (errors.title) {
                    setErrors((prev) => ({ ...prev, title: null }));
                  }
                }}
                placeholder="Enter event title"
                disabled={isSubmitting}
              />
              {errors.title && (
                <p className="text-red-400 text-xs mt-1">{errors.title}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Start Time *
              </label>
              <input
                type="datetime-local"
                className={`simple-input ${
                  errors.start ? "border-red-500" : ""
                }`}
                value={newEvent.start}
                onChange={(e) => {
                  setNewEvent({ ...newEvent, start: e.target.value });
                  if (errors.start) {
                    setErrors((prev) => ({ ...prev, start: null }));
                  }
                }}
                disabled={isSubmitting}
              />
              {errors.start && (
                <p className="text-red-400 text-xs mt-1">{errors.start}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                End Time *
              </label>
              <input
                type="datetime-local"
                className={`simple-input ${errors.end ? "border-red-500" : ""}`}
                value={newEvent.end}
                onChange={(e) => {
                  setNewEvent({ ...newEvent, end: e.target.value });
                  if (errors.end) {
                    setErrors((prev) => ({ ...prev, end: null }));
                  }
                }}
                disabled={isSubmitting}
              />
              {errors.end && (
                <p className="text-red-400 text-xs mt-1">{errors.end}</p>
              )}
            </div>

            <div className="flex flex-col gap-4">
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="allDay"
                  checked={newEvent.allDay}
                  onChange={(e) =>
                    setNewEvent({ ...newEvent, allDay: e.target.checked })
                  }
                  className="simple-checkbox"
                  disabled={isSubmitting}
                />
                <label htmlFor="allDay" className="text-sm text-gray-300">
                  All day event
                </label>
              </div>
              <button
                type="submit"
                className="simple-button"
                disabled={isSubmitting}
              >
                {isSubmitting ? "Creating..." : "Create Event"}
              </button>
            </div>
          </form>
        </div>

        {/* Calendar */}
        <div className="simple-card">
          <h3 className="text-xl font-semibold text-white mb-4">Calendar</h3>
          <Calendar
            localizer={localizer}
            events={events}
            startAccessor="start"
            endAccessor="end"
            style={{ height: 600 }}
            selectable
            onSelectEvent={handleSelectEvent}
            onSelectSlot={handleSelectSlot}
            view={currentView}
            onView={setCurrentView}
            views={["month", "week", "day", "agenda"]}
            popup
          />
        </div>

        {editingEvent && (
          <div className="simple-card">
            <h3 className="text-xl font-semibold mb-4 text-white">
              Edit Event
            </h3>

            <form onSubmit={handleUpdateEvent}>
              <div className="space-y-4">
                <div>
                  <label
                    htmlFor="edit-title"
                    className="block text-sm font-medium text-gray-300 mb-1"
                  >
                    Event Title
                  </label>
                  <input
                    type="text"
                    id="edit-title"
                    className="simple-input"
                    placeholder="Enter event title..."
                    value={editingEvent.title}
                    onChange={(e) =>
                      setEditingEvent((prev) => ({
                        ...prev,
                        title: e.target.value,
                      }))
                    }
                  />
                  {errors.title && (
                    <p className="text-red-400 text-sm mt-1">{errors.title}</p>
                  )}
                </div>

                <div>
                  <label
                    htmlFor="edit-start"
                    className="block text-sm font-medium text-gray-300 mb-1"
                  >
                    Start Date & Time
                  </label>
                  <input
                    type="datetime-local"
                    id="edit-start"
                    className="simple-input"
                    value={editingEvent.start}
                    onChange={(e) =>
                      setEditingEvent((prev) => ({
                        ...prev,
                        start: e.target.value,
                      }))
                    }
                  />
                  {errors.start && (
                    <p className="text-red-400 text-sm mt-1">{errors.start}</p>
                  )}
                </div>

                <div>
                  <label
                    htmlFor="edit-end"
                    className="block text-sm font-medium text-gray-300 mb-1"
                  >
                    End Date & Time
                  </label>
                  <input
                    type="datetime-local"
                    id="edit-end"
                    className="simple-input"
                    value={editingEvent.end}
                    onChange={(e) =>
                      setEditingEvent((prev) => ({
                        ...prev,
                        end: e.target.value,
                      }))
                    }
                  />
                  {errors.end && (
                    <p className="text-red-400 text-sm mt-1">{errors.end}</p>
                  )}
                </div>

                {errors.general && (
                  <div className="text-red-400 text-sm">{errors.general}</div>
                )}

                <div className="flex gap-2">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="simple-button flex-1"
                  >
                    {isSubmitting ? "Updating..." : "Update Event"}
                  </button>

                  <button
                    type="button"
                    onClick={() => handleDeleteEvent(editingEvent.id)}
                    className="simple-button bg-red-600 hover:bg-red-700 flex-1"
                  >
                    Delete Event
                  </button>

                  <button
                    type="button"
                    onClick={handleCancelEdit}
                    className="simple-button bg-gray-600 hover:bg-gray-700 flex-1"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
}

üìù File: index.css
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\index.css
--------------------------------------------------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
  background-color: #000000;
  color: #ffffff;
}

/* Simple Card */
.simple-card {
  background-color: #1a1a1a;
  border: 1px solid #333;
  border-radius: 8px;
  padding: 20px;
}

/* Simple Input */
.simple-input {
  width: 100%;
  padding: 12px 16px;
  background-color: #1a1a1a;
  border: 1px solid #333;
  border-radius: 4px;
  color: white;
  outline: none;
  transition: border-color 0.2s ease;
}

.simple-input:focus {
  border-color: #555;
}

.simple-input:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.simple-input::placeholder {
  color: #888;
}

.simple-input.border-red-500 {
  border-color: #ef4444;
}

/* Simple Button */
.simple-button {
  width: 100%;
  padding: 12px 20px;
  background-color: #333;
  border: 1px solid #555;
  border-radius: 4px;
  color: white;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.simple-button:hover:not(:disabled) {
  background-color: #444;
}

.simple-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  background-color: #222;
}

/* Simple Checkbox */
.simple-checkbox {
  width: 16px;
  height: 16px;
  accent-color: #666;
}

/* View Toggle Buttons */
.view-btn {
  padding: 8px 16px;
  font-size: 14px;
  font-weight: 500;
  border-radius: 4px;
  border: 1px solid #555;
  background-color: #333;
  color: #ccc;
  cursor: pointer;
  transition: all 0.2s ease;
}

.view-btn:hover {
  background-color: #444;
  color: white;
}

.view-btn.active {
  background-color: #555;
  color: white;
  border-color: #777;
}

/* Calendar Styles */
.rbc-header {
  background-color: #1a1a1a !important;
  color: white !important;
  font-weight: 600 !important;
  padding: 12px !important;
  border: 1px solid #333 !important;
}

.rbc-today {
  background-color: #333 !important;
  color: white !important;
}

.rbc-event {
  background-color: #555 !important;
  border: none !important;
  border-radius: 4px !important;
  color: white !important;
}

.rbc-event:hover {
  background-color: #666 !important;
}

.rbc-btn-group > button {
  background-color: #1a1a1a !important;
  border: 1px solid #333 !important;
  color: white !important;
  padding: 8px 16px !important;
  border-radius: 4px !important;
  margin: 0 2px !important;
}

.rbc-btn-group > button:hover {
  background-color: #333 !important;
}

.rbc-active {
  background-color: #555 !important;
  color: white !important;
}

.rbc-toolbar {
  margin-bottom: 20px !important;
  padding: 16px !important;
  background-color: #1a1a1a !important;
  border: 1px solid #333 !important;
  border-radius: 8px !important;
}

.rbc-toolbar-label {
  font-size: 20px !important;
  font-weight: 700 !important;
  color: white !important;
  text-align: center !important;
  flex-grow: 1 !important;
}

.rbc-time-slot {
  border-color: #333 !important;
}

.rbc-timeslot-group {
  border-color: #333 !important;
}

.rbc-date-cell {
  padding: 8px !important;
  color: white !important;
}

.rbc-date-cell.rbc-off-range {
  color: #666 !important;
}

.rbc-button-link {
  color: white !important;
  text-decoration: none !important;
}

.rbc-button-link:hover {
  color: #ccc !important;
}

.rbc-selected {
  background-color: #333 !important;
  border: 1px solid #555 !important;
}

.rbc-calendar {
  background-color: #000 !important;
  color: white !important;
}

.rbc-month-view {
  background-color: #000 !important;
}

.rbc-day-bg {
  background-color: #000 !important;
}

.rbc-time-view {
  background-color: #000 !important;
}

.rbc-time-content {
  background-color: #000 !important;
}

.rbc-time-header {
  background-color: #000 !important;
}

üìù File: main.jsx
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\main.jsx
--------------------------------------------------------------------------------
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

üìù File: supabaseClient.js
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\supabaseClient.js
--------------------------------------------------------------------------------
// src/supabaseClient.js
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn("Supabase variables not set. Check .env");
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

================================================================================

üìÇ Directory: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\assets
================================================================================

================================================================================

üìÇ Directory: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\services
================================================================================

üìù File: api.js
Path: C:\Users\Tech\Calendrier-1\calendrier\frontend\src\services\api.js
--------------------------------------------------------------------------------
// src/services/api.js (updated ‚Äî no all_day)
import { supabase } from "../supabaseClient";

/**
 * Fetch events. Optional filters: userId, from, to
 */
export async function fetchEvents(userId, opts = {}) {
  let query = supabase.from("events").select("*");

  if (userId !== undefined && userId !== null) {
    query = query.eq("user_id", String(userId));
  }
  if (opts.from) {
    query = query.gte("end", opts.from);
  }
  if (opts.to) {
    query = query.lte("start", opts.to);
  }

  const { data, error } = await query.order("start", { ascending: true });
  if (error) throw error;
  return data;
}

export async function createEvent(payload) {
  // payload: { title, start, end, userId, category, color }
  const insertObj = {
    title: payload.title,
    start: payload.start,
    end: payload.end,
    user_id: payload.userId ?? null,
    category: payload.category ?? null,
    color: payload.color ?? null,
  };

  const { data, error } = await supabase
    .from("events")
    .insert([insertObj])
    .select()
    .single();

  if (error) throw error;
  return data;
}

export async function updateEvent(id, payload) {
  const updateObj = {
    title: payload.title,
    start: payload.start,
    end: payload.end,
    category: payload.category ?? null,
    color: payload.color ?? null,
  };

  const { data, error } = await supabase
    .from("events")
    .update(updateObj)
    .eq("id", id)
    .select()
    .single();

  if (error) throw error;
  return data;
}

export async function deleteEvent(id) {
  const { error } = await supabase.from("events").delete().eq("id", id);
  if (error) throw error;
  return true;
}

================================================================================
